---

name: Какие бывают методы

theory: |
  Одна из базовых тем в Java, на которой строится код – классы и объекты. Они появляются буквально с первых строчек кода, но изучить их и начать использовать не совсем просто. Поэтому изучение объектов и классов растягивается на множество уроков. В этом уроке мы чуть больше окунемся в устройство языка. Не переживайте, если пазл все еще не складывается — это нормально. Классы, объекты и методы – сложная тема, требующая времени.

  Мы уже сталкивались с методами, встроенными в Java, в разных формах:

  ```java
  System.out.println();
  varname.toLowerCase();
  varname.substring();
  Integer.parseInt();
  ChronoUnit.DAYS.between();
  ```

  Все подобные вызовы можно разбить на две группы:

  1. Вызовы методов у объектов, таких как строки
  2. Вызовы статических методов, которые не связаны с конкретными объектами

  ## Вызовы методов у объектов

  Из объектов мы пока сталкивались только со строками, но принцип одинаковый для любых объектов:

  ```java
  // Синтаксис создания объекта
  // new – создает новый объект класса
  var user = new User();

  // Извлекает имя у пользователя
  user.getName();

  // Пример с другими объектами

  // Извлекает текущий день
  currentDate.getDayOfMonth();
  // Проверка того, что файл существует
  file.exists();
  ```

  Такие методы выполняют действия над объектами, у которых они вызываются, и часто не принимают никаких аргументов. Объекты для простоты можно воспринимать как данные, которые доступны внутри метода. Например, метод строки `toLowerCase()` внутри себя берет исходную строку, преобразует ее и возвращает результат наружу.

  Кстати, `System.out.println()` — это метод объекта `out`, который лежит внутри класса `System`.

  ## Вызовы статических методов

  Но не все вызовы методов связаны с объектами: иногда действие есть, а объекта нет. В таких случаях используются **статические методы**.

  Что это может быть? Математические операции над числами или какие-то действия, которые не относятся к конкретному объекту, а имеют отношение ко всем объектам данного типа. В таком случае метод почти всегда опирается на данные, которые приходят в виде параметров:

  ```java
  // Получение случайного числа, вызов напрямую из класса Math
  Math.random();

  // Чтение данных по указанному пути
  Files.readString(path);
  ```

  Классы `Math` и `Files` в данном случае нужны только для вызова, потому что методы определены внутри них. Java не позволяет определять методы вне классов.

  Честно говоря, не все так просто. Всегда можно придумать какой-то объект, над которым происходит вычисление. Также верно и обратное: всегда можно обойтись без объектов. Есть языки, в которых объектов нет вообще. В итоге все решает тот, кто проектирует конкретную часть кода:

  ```java
  // Без объекта, статический метод
  Files.readString(path);

  // Хотя можно было бы и через объект файла
  path.read();
  ```

  ## Выводы

  * Статические методы не связаны с конкретными объектами и вызываются из класса напрямую
  * Нестатические методы строят свою логику относительно данных самого объекта и вызываются у конкретных объектов

  Все это плавно подводит нас к возможности самостоятельно создавать классы, объекты и методы, без чего невозможно себе представить ни одну программу, даже небольшую.

instructions: |

  В переменной `emoji` находится текстовый грустный смайлик *-(*. Ваша задача — сделать этот смайлик веселым с помощью двух преобразований:

    * Добавить слева глаза *:*
    * Заменить *(* на *)* (с помощью метода строки `replace()`)

  Должно получиться: *:-)*. Выведите его на экран.

# tips:
#   - |
#     [Как искать техническую информацию](https://guides.hexlet.io/how-to-search/)

# definitions:
#   - name: Побочный эффект
#     description: "действие, которое изменяет внешнее окружение (среду выполнения). Например, вывод на экран или отправка письма."
